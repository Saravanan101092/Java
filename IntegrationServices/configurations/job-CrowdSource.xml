<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
	http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.2.xsd
	">
 
	<context:component-scan base-package="com.staples.pcm.springbatch.boomerang" />
	
  <import resource="file:${SPRING_BATCH_CONFIG_DIR}/database.xml" />
  <import resource="file:${SPRING_BATCH_CONFIG_DIR}/context.xml" />
 
 
	<job id="CSVtoExcelJob" xmlns="http://www.springframework.org/schema/batch">
		<step id="transformCSV">
			<tasklet transaction-manager="transactionManager"
				start-limit="1" allow-start-if-complete="false">
				<chunk reader="cvsFileItemReader" 
				writer="excelProductWriter" commit-interval="100">
				</chunk>
				
				<listeners>
					<listener ref="excelProductWriter" />
				</listeners>
				
			</tasklet>
		</step>
		
		<listeners>
			<listener ref="crowdSourceJobListner" />
		</listeners>
		
	</job>
     <bean id="crowdSourceJobListner" 
          class="com.staples.pcm.springbatch.crowdsource.CrowdSourceJobListner" >
   
	</bean> 	
	

	<!-- ItemReader which reads from database and returns the row mapped by rowMapper -->
  <bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
 
	<!-- Read a csv file -->
	<property name="resource" ref="inputFile"/>
 	<property name="linesToSkip" value="1" />
 
	<property name="lineMapper">
		<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
		  <!-- split it -->
		  <property name="lineTokenizer">
		        <bean
			  class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
				<property name="names" value="iD,primary_Image_Asset_Reference_ID,secondary_Image_1_Asset_Reference_ID,secondary_Image_2_Asset_Reference_ID,secondary_Image_3_Asset_Reference_ID,secondary_Image_4_Asset_Reference_ID,secondary_Image_5_Asset_Reference_ID,secondary_Image_6_Asset_Reference_ID,secondary_Image_7_Asset_Reference_ID,secondary_Image_8_Asset_Reference_ID,vendor_Model_Number,vendorNumber,vendorName,primary_Image,secondary_Image_1,secondary_Image_2,secondary_Image_3,secondary_Image_4,secondary_Image_5,secondary_Image_6,secondary_Image_7,secondary_Image_8,CrowdSource,primary_Image_Validation,secondary_Image_1_Validation,secondary_Image_2_Validation,secondary_Image_3_Validation,secondary_Image_4_Validation,secondary_Image_5_Validation,secondary_Image_6_Validation,secondary_Image_7_Validation,secondary_Image_8_Validation" />
			</bean>
		  </property>
		  <property name="fieldSetMapper">   
		         <!-- return back to reader, rather than a mapped object. -->
		         <!--
			 <bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
		          --> 
			  <!-- map to an object -->
			  <bean
			    class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
				<property name="prototypeBeanName" value="crowdSourcePOJO" />
			  </bean>			
		  </property>
 
		  </bean>
	  </property>
 
  </bean>

	<bean id="excelProductWriter" class="com.staples.pcm.springbatch.crowdsource.CrowdSourceExcelWriter">
		<!-- write to this xlsx file -->
	</bean>
	<bean id="crowdSourcePOJO" class="com.staples.pcm.springbatch.crowdsource.model.CrowdSourcePOJO" scope="prototype" />


	<bean id="inputFile"
		class="org.springframework.core.io.FileSystemResource" scope="step">
		<constructor-arg value="#{jobParameters[inputFile]}" />
	</bean>
	<bean id="outputFile"
		class="org.springframework.core.io.FileSystemResource" scope="step">
		<constructor-arg value="#{jobParameters[outputFile]}" />
	</bean>
	<!-- 
	<bean id="outputFile3"
		class="org.springframework.core.io.FileSystemResource" scope="step">
		<constructor-arg value="#{jobParameters[outputFile3]}" />
	</bean>
	 -->
 
</beans>