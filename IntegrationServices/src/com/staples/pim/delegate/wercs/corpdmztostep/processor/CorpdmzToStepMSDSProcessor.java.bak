package com.staples.pim.delegate.wercs.corpdmztostep.processor;

import static com.staples.pim.base.util.IntgSrvAppConstants.FILE_DONE;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.staples.pim.base.common.bean.FTPConnectionBean;
import com.staples.pim.base.common.logging.IntgSrvLogger;
import com.staples.pim.base.loader.IntgSrvPropertiesReader;
import com.staples.pim.base.util.IntgSrvAppConstants;
import com.staples.pim.base.util.IntgSrvUtils;
import com.staples.pim.delegate.datamigration.utils.DatamigrationAppConstants;
import com.staples.pim.delegate.datamigration.utils.DatamigrationCommonUtil;
import com.staples.pim.delegate.wercs.common.SBDatabaseHandlingService;
import com.staples.pim.delegate.wercs.common.WercsCommonUtil;
import com.staples.pim.delegate.wercs.corpdmztostep.runner.RunSchedulerCorpdmzToStep;
import com.staples.pim.delegate.wercs.corpdmztostep.runner.WercsRegulatoryDataFeedJobListner;




public class CorpdmzToStepMSDSProcessor {

	public static String STEPID =null;
	public static String SKU =null;
	public static String PIPID =null;
	public static String UPC =null;
	public static String GroupID=null;
	public static String URL="http://sds.staples.com/msds/";
	public static String wercsregulatorydataFeedDoneDir = IntgSrvUtils.reformatFilePath(IntgSrvPropertiesReader
			.getProperty(RunSchedulerCorpdmzToStep.WERCSREGULATORYDATA_DONE_FOLDER));
	
	public static IntgSrvLogger		itemTraceLogger						= IntgSrvLogger
			.getInstance(DatamigrationAppConstants.FREEFORM_TRACE_LOGGER_WERCS_CORPDMZTOSTEP);
	
	public static void MSDSCopdmzToStepMSDSProcessor(File input) throws IOException
 {
		File f=null;
		//File dir = new File(input.getParentFile().getPath());
		File folder = new File(input.getParentFile().getPath());
        File[] listOfFiles = folder.listFiles();

        for (int i = 0; i < listOfFiles.length; i++) {

            if (listOfFiles[i].isFile() && listOfFiles[i].getName().endsWith(RunSchedulerCorpdmzToStep.MSDSDOCFEED_FILE_EXTN)) {
          
	        	String filename=listOfFiles[i].getName().split("\\_")[1];
				String filename1=filename.split("\\.")[0];
		
				SBDatabaseHandlingService dbAccess = (SBDatabaseHandlingService)CorpdmzToStepRegDataProcessor.context.getBean("databaseAccess");
				String SKUValue = dbAccess.getWercsUPCforMSDSDoc(filename1,listOfFiles[i],itemTraceLogger);
				
				if(SKUValue!=null)
				{
                f = new File(folder+"/"+listOfFiles[i].getName()); 
                
                if(f.renameTo(new File(folder+"/"+listOfFiles[i].getName().replace(filename1, SKUValue))))
                {
                sendfiletoSFTP(folder);
                
            }
                else
                {
                	WercsRegulatoryDataFeedJobListner msdsdocumentProcessor = new WercsRegulatoryDataFeedJobListner();
					msdsdocumentProcessor.moveToDestnationDir(listOfFiles[i].getPath(), CorpdmzToStepMSDSProcessor.wercsregulatorydataFeedDoneDir);
                }
				
        }
				else
				{
					System.out.println("UPC IS NOT AVAILABLE");
				}
        }
        }
        System.out.println("conversion is done");
    }
	
	

private static void sendfiletoSFTP(File folder) {
	
	 File[] listOfFiles = folder.listFiles();
	 for (int i = 0; i < listOfFiles.length; i++) {

         if (listOfFiles[i].isFile() && listOfFiles[i].getName().endsWith(RunSchedulerCorpdmzToStep.MSDSDOCFEED_FILE_EXTN)) {
        	 
        	 List<String> outputFileList=new ArrayList<String>();
        	 outputFileList.add(listOfFiles[i].getPath());
        	 FTPConnectionBean ftpConnectionBean = getSFTPDestDetails();
 			try {
 				WercsCommonUtil.getInstance().fileSFTPToStepInboundDir(ftpConnectionBean, outputFileList, RunSchedulerCorpdmzToStep.PUBLISH_ID);
 			} catch (IOException e) {
 				// TODO Auto-generated catch block
 				e.printStackTrace();
 			}
 			try {
 				WercsRegulatoryDataFeedJobListner msdsdocumentProcessor = new WercsRegulatoryDataFeedJobListner();
 				msdsdocumentProcessor.moveToDestnationDir(listOfFiles[i].getPath(), wercsregulatorydataFeedDoneDir);
 			} catch (IOException e) {
 				// TODO Auto-generated catch block
 				e.printStackTrace();
 				
 			}
        	 String filename=listOfFiles[i].getName().split("\\.")[0];
        	 String filename1=filename.split("\\_")[1];
        	createCSVFile(filename1,filename+".csv","",URL+listOfFiles[i].getName());
         }
         }
	}

private static void createCSVFile(String skunum,String filename,String imageno,String URL) {
	
	
	System.out.println("entered csv creation");
	try {
		File file=new File(wercsregulatorydataFeedDoneDir+filename);
		FileWriter writer = new FileWriter(file);
		//System.out.println("getting the path : " + outputpath);
		//System.out.println("getting the path : " + outputpath + "test.csv");
		//System.out.println("entered csv creation");
		writer.append("ID");
		writer.append(',');
		writer.append("SKU");
		writer.append(',');
		writer.append("AssetID");
		writer.append(',');
		writer.append("AssetURL");
		writer.append('\n');
		
		writer.append("Item-2376539");
		writer.append(',');
		writer.append(skunum);
		writer.append(',');
		writer.append(imageno);
		writer.append(',');
		writer.append(URL);

		writer.flush();
		writer.close();
		List<String> outputlist=new ArrayList<String>();
		outputlist.add(file.getPath());
		 DatamigrationCommonUtil.sendFile(file, file, file.getParentFile().getParentFile().getPath() + "/"
 				+ FILE_DONE + "/", "CorpDMZtoSTEP", true, DatamigrationAppConstants.EHF_PUBLISH_ID_WERCSCORPDMZTOSTEP);
		
	}
	
	catch (IOException e) {
		e.printStackTrace();
	}
	
	
}
	
	
	private static FTPConnectionBean getSFTPDestDetails() {

		FTPConnectionBean connectionsBean = new FTPConnectionBean();
		connectionsBean.setHostName(IntgSrvPropertiesReader.getProperty(IntgSrvAppConstants.CORPDMZTOSTEP_FEED_SFTP_HOST_STEP));
		connectionsBean.setUserId(IntgSrvPropertiesReader.getProperty(IntgSrvAppConstants.CORPDMZTOSTEP_FEED_SFTP_USERNAME_STEP));
		connectionsBean.setPassword(IntgSrvPropertiesReader.getProperty(IntgSrvAppConstants.CORPDMZTOSTEP_FEED_SFTP_PASSWORD_STEP));
		connectionsBean.setDestinationUrl(IntgSrvPropertiesReader
				.getProperty(IntgSrvAppConstants.CORPDMZTOSTEP_FEED_SFTP_TARGET_DIR_STEP));
		return connectionsBean;
	}
	
	     
}
