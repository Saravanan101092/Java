package com.staples.pim.delegate.wercs.common;

import java.io.File;
import java.io.IOException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import oracle.jdbc.pool.OracleDataSource;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;

import com.staples.pim.base.common.logging.IntgSrvLogger;
import com.staples.pim.base.util.IntgSrvAppConstants;
import com.staples.pim.base.util.IntgSrvUtils;
import com.staples.pim.delegate.datamigration.utils.DatamigrationCommonUtil;
import com.staples.pim.delegate.wercs.corpdmztostep.processor.CorpdmzToStepMSDSProcessor;
import com.staples.pim.delegate.wercs.corpdmztostep.runner.WercsRegulatoryDataFeedJobListner;
import com.staples.pim.delegate.wercs.model.MasterTableVO;

import oracle.jdbc.pool.OracleDataSource;

public class SBDatabaseHandlingService {

	public static String			infoLogString;
	protected IntgSrvLogger			traceLogger											= IntgSrvLogger.getInstance(IntgSrvAppConstants.FREEFORM_TRACE_LOGGER);
	protected String 				clazzname 											= this.getClass().getName();
	protected IntgSrvLogger			ehfLogger 											= IntgSrvLogger.getInstance(IntgSrvAppConstants.EHF_LOGGER);
	public final String		getUPCforRegData						= "{call getupcforregdata(?,?,?,?,?)}";
	public final String		getUPCforMSDSDoc						= "{call getupcformsdsdoc(?,?,?,?,?)}";
	public static int		REGULATORYDATA_UNSOLICITED_SKUNOTAVAILABLE	= 508;
	public static int		MSDS_UNSOLICITED_SKUNOTAVAILABLE			= 510;


	
	public OracleDataSource datasource;

	
	public static final String DBACCESS = "databaseAccess";
	
	public final String masterTableInsertUpdateProcedure = "{call SB_OWNER.wercs_mastertable_insertupdate(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	public final String registrationStatusUpdateProcedure = "{call SB_OWNER.WERCS_REGSTATUS_UPDATE(?,?,?)}";
	public final String wercsStatusAuditTableInsertProcedure = "{call SB_OWNER.wercs_status_audit_insert(?,?,?)}";
	public final String wercsRetryUPCsQuery = "select upc, pip_id, transaction_type, created_date, registration_status, wercs_out_trigger, regulatory_data_status, step_id, model_number from SB_OWNER.wercs_status_master where registration_status <> 1 and registration_status <> 30 and wercs_out_trigger = 'Get Status' and regulatory_data_status = '0'";
	public final String rejectedItemUpdateQuery = "{call SB_OWNER.wercs_rejecteditem_update(?,?)}";
	
	
	public OracleDataSource getDatasource() {
	
		return datasource;
	}

	
	public void setDatasource(OracleDataSource datasource) {
	
		this.datasource = datasource;
	}
	

	public boolean masterTableInsertUpdate(MasterTableVO masterTableRow,IntgSrvLogger logger){
		
		logger.info("Insert/Update master table");
		
		Connection dbConnection = null;
		CallableStatement callableStatement = null;

		try {
			dbConnection = datasource.getConnection();
			logger.info("Connection obtained.");
			if(dbConnection!=null){
				callableStatement = dbConnection.prepareCall(masterTableInsertUpdateProcedure);

				callableStatement.setString(1, masterTableRow.getUPCNo());
				callableStatement.setString(2, masterTableRow.getWercsID());
				callableStatement.setString(3, masterTableRow.getPipid());
				callableStatement.setString(4, masterTableRow.getSkuno());
				callableStatement.setString(5, masterTableRow.getStepid());
				callableStatement.setString(6, masterTableRow.getModelno());
				callableStatement.setString(7, masterTableRow.getItemdesc());
				callableStatement.setString(8, masterTableRow.getSupplierName());
				callableStatement.setString(9, masterTableRow.getRequestorName());
				callableStatement.setString(10, masterTableRow.getRequestorID());
				callableStatement.setString(11, masterTableRow.getSupplierId());
				callableStatement.setString(12, masterTableRow.getPsId());
				callableStatement.setString(13, masterTableRow.getMerchantId());
				callableStatement.setString(14, masterTableRow.getTranstype());
				callableStatement.setInt(15, masterTableRow.getRegistrationStatus());
				callableStatement.setString(16, masterTableRow.getWercsTrigger());
				callableStatement.setString(17, masterTableRow.getRegulatoryStatus());
				
				// execute getDBUSERByUserId store procedure
				int result = callableStatement.executeUpdate();
				
				if(result == 1)
				{
					infoLogString = "Procedure executed without exceptions. Inserted values into database. ";
					traceLogger.info(clazzname, "run", infoLogString);
					ehfLogger.info(infoLogString);
					IntgSrvUtils.printConsole(infoLogString);
				}
			}

		} catch (SQLException e) {
			logger.error("Exception caught while calling stored procedure :"+e.getErrorCode()+" :"+e.getMessage());
			DatamigrationCommonUtil.printConsole(e.getMessage());
			IntgSrvUtils.alertByEmail(e, DatamigrationCommonUtil.getClassName(), "");
			return false;
		} finally {

			if (callableStatement != null) {
				try {
					callableStatement.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}

			if (dbConnection != null) {
				try {
					dbConnection.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}

		}
		return true;
	}
	
	public void registrationStatusUpdate(String upcNo, String pipID, int registrationStatus,IntgSrvLogger logger){
		
		logger.info("Updating RegistrationStatus in Database");
		
		Connection dbConnection = null;
		CallableStatement callableStatement = null;

		try {
			dbConnection = datasource.getConnection();
			if(dbConnection!=null){
				callableStatement = dbConnection.prepareCall(registrationStatusUpdateProcedure);

				callableStatement.setString(1, upcNo);
				callableStatement.setInt(2, registrationStatus);
				callableStatement.setString(3, pipID);
				
				// execute getDBUSERByUserId store procedure
				int result = callableStatement.executeUpdate();

				DatamigrationCommonUtil.printConsole("Procedure executed without exceptions. Result="+result);
			}

		} catch (SQLException e) {
			logger.error("Exception caught while calling stored procedure :"+e.getErrorCode()+" :"+e.getMessage());
			DatamigrationCommonUtil.printConsole(e.getMessage());
			IntgSrvUtils.alertByEmail(e, DatamigrationCommonUtil.getClassName(), "");
		} finally {

			if (callableStatement != null) {
				try {
					callableStatement.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}

			if (dbConnection != null) {
				try {
					dbConnection.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}

		}
	}
	
public void auditTableInsert(String upcNo, String pipID, int statusno,IntgSrvLogger logger){
		
		logger.info("Inserting row in Audit table with status="+statusno+" for pipid="+pipID);
	
		Connection dbConnection = null;
		CallableStatement callableStatement = null;

		try {
			dbConnection = datasource.getConnection();
			if(dbConnection!=null){
				callableStatement = dbConnection.prepareCall(wercsStatusAuditTableInsertProcedure);

				callableStatement.setString(1, upcNo);
				callableStatement.setInt(3, statusno);
				callableStatement.setString(2, pipID);
				
				// execute getDBUSERByUserId store procedure
				int result = callableStatement.executeUpdate();

				DatamigrationCommonUtil.printConsole("Procedure executed without exceptions.Result="+result);
			}

		} catch (SQLException e) {
			logger.error("Exception caught while calling stored procedure :"+e.getErrorCode()+" :"+e.getMessage());
			DatamigrationCommonUtil.printConsole(e.getMessage());
			IntgSrvUtils.alertByEmail(e, DatamigrationCommonUtil.getClassName(), "");
		} finally {

			if (callableStatement != null) {
				try {
					callableStatement.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}

			if (dbConnection != null) {
				try {
					dbConnection.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}

		}
	}
	
public List<MasterTableVO> getWercsRetryUPCs(IntgSrvLogger logger){
	
	logger.info("Getting UPCs to Retry");
	
	Connection dbConnection = null;
	Statement statement = null;
	List<MasterTableVO> masterTableVOList = new ArrayList<MasterTableVO>();
	try {
		dbConnection = datasource.getConnection();
		if(dbConnection!=null){
			logger.info("Connection obtained");
			statement = dbConnection.createStatement();
			
			// execute getDBUSERByUserId store procedure
			ResultSet resultSet = statement.executeQuery(wercsRetryUPCsQuery);
			
				while(resultSet.next()){
					
					MasterTableVO masterTableVO = new MasterTableVO();
					masterTableVO.setUPCNo(resultSet.getString("upc"));
					masterTableVO.setPipid(resultSet.getString("pip_id"));
					masterTableVO.setTranstype(resultSet.getString("transaction_type"));
					masterTableVO.setCreatedDate(resultSet.getTimestamp("created_date"));
					masterTableVO.setPreviousRegistrationStatus(resultSet.getInt("registration_status"));
					masterTableVO.setStepid(resultSet.getString("step_id"));
					masterTableVO.setModelno(resultSet.getString("model_number"));
					masterTableVOList.add(masterTableVO);
				}
			logger.info(masterTableVOList.size()+" items retrieved from DB to re check WERCS Registration status");
			DatamigrationCommonUtil.printConsole("Query executed without exceptions.");
			
		}

	} catch (SQLException e) {
		logger.error("Exception caught while calling stored procedure :"+e.getErrorCode()+" :"+e.getMessage());
		DatamigrationCommonUtil.printConsole(e.getMessage());
		IntgSrvUtils.alertByEmail(e, DatamigrationCommonUtil.getClassName(), "");
	} finally {

		if (statement != null) {
			try {
				statement.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		if (dbConnection != null) {
			try {
				dbConnection.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
	
	return masterTableVOList;
}

public void rejectedItemUpdate(List<MasterTableVO> rejectedItems,IntgSrvLogger logger){
	
	logger.info("updating the rejected status in Database");
	
	Connection dbConnection = null;
	CallableStatement callableStatement = null;

	try {
		dbConnection = datasource.getConnection();
		if(dbConnection!=null){
			callableStatement = dbConnection.prepareCall(rejectedItemUpdateQuery);

			for(MasterTableVO masterTableVO : rejectedItems){
				callableStatement.setString(1, masterTableVO.getUPCNo());
				callableStatement.setString(2, masterTableVO.getPipid());
				// execute getDBUSERByUserId store procedure
				int result = callableStatement.executeUpdate();
				DatamigrationCommonUtil.printConsole("Procedure executed without exceptions. Result="+result);
			}
		}

	} catch (SQLException e) {
		logger.error("Exception caught while calling stored procedure :"+e.getErrorCode()+" :"+e.getMessage());
		DatamigrationCommonUtil.printConsole(e.getMessage());
		IntgSrvUtils.alertByEmail(e, DatamigrationCommonUtil.getClassName(), "");
		
	} finally {

		if (callableStatement != null) {
			try {
				callableStatement.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		if (dbConnection != null) {
			try {
				dbConnection.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

	}
}

	public List<String> getWercsUPCforRegData(String firstvalue,IntgSrvLogger logger) throws IOException {

		// Connection con = null;
		Statement statement = null;
		System.out.println("firstvalue : " + firstvalue);
		List<String> list = new ArrayList<String>();
		Connection dbConnection = null;
		CallableStatement callableStatement = null;
		try {
			dbConnection = datasource.getConnection();
			if (dbConnection != null) {
				callableStatement = dbConnection.prepareCall(getUPCforRegData);

				callableStatement.setString(1, firstvalue);
				callableStatement.registerOutParameter(2, java.sql.Types.VARCHAR);
				callableStatement.registerOutParameter(3, java.sql.Types.VARCHAR);
				callableStatement.registerOutParameter(4, java.sql.Types.VARCHAR);
				callableStatement.registerOutParameter(5, java.sql.Types.VARCHAR);
System.out.println("entered into setting the value");
				// execute getDBUSERByUserId store procedure
				int result = callableStatement.executeUpdate();
				System.out.println("Procedure executed without exceptions.Result=====" + result);
				if(result > 0)
				{
					if(callableStatement.getString(2)!=null)
					{
					System.out.println("Procedure executed without exceptions.Result=" + result);
					System.out.println("setting the value into list : "+callableStatement.getString(2));
					list.add(callableStatement.getString(2));
					list.add(callableStatement.getString(3));
					list.add(callableStatement.getString(4));
					list.add(callableStatement.getString(5));
					System.out.println("setting the value into list");
				}
				else
				{
					//WercsRegulatoryDataFeedJobListner msdsdocumentProcessor = new WercsRegulatoryDataFeedJobListner();
					//msdsdocumentProcessor.moveToDestnationDir(filename.getPath(), CopdmzToStepMSDSProcessor.wercsregulatorydataFeedDoneDir);
					System.out.println("sending mail to LP Team");
					auditTableInsert(firstvalue,"",REGULATORYDATA_UNSOLICITED_SKUNOTAVAILABLE,logger);
					SendMail();
				}

				}
			}

		}  catch (SQLException e) {

			System.out.println(e.getMessage());
		} finally {

			if (statement != null) {
				try {
					statement.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}

			if (dbConnection != null) {
				try {
					dbConnection.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}

		}
		return list;

	}
	
	public String getWercsUPCforMSDSDoc(String firstvalue, File filename, IntgSrvLogger logger) throws IOException {

		// Connection con = null;
		Statement statement = null;
		System.out.println("firstvalue : " + firstvalue);
		String SKUValue=null;
		Connection dbConnection = null;
		CallableStatement callableStatement = null;
		try {
			dbConnection = datasource.getConnection();
			if (dbConnection != null) {
				callableStatement = dbConnection.prepareCall(getUPCforMSDSDoc);

				callableStatement.setString(1, firstvalue);
				callableStatement.registerOutParameter(2, java.sql.Types.VARCHAR);
				callableStatement.registerOutParameter(3, java.sql.Types.VARCHAR);
				callableStatement.registerOutParameter(4, java.sql.Types.VARCHAR);
				callableStatement.registerOutParameter(5, java.sql.Types.VARCHAR);
                System.out.println("entered into setting the value");
				// execute getDBUSERByUserId store procedure
				int result = callableStatement.executeUpdate();
				System.out.println("Procedure executed without exceptions.Result=====" + result);
				if(result > 0)
				{
					if(callableStatement.getString(2)!=null)
					{
						if(callableStatement.getString(3)!=null)
						{
					System.out.println("Procedure executed without exceptions.Result=" + result);
					System.out.println("setting the value into list : "+callableStatement.getString(2));
					SKUValue=callableStatement.getString(3);
					System.out.println("setting the value into list");
				}
				else
				{
					auditTableInsert(firstvalue,"",MSDS_UNSOLICITED_SKUNOTAVAILABLE,logger);
				}

				}
					else
					{
						WercsRegulatoryDataFeedJobListner msdsdocumentProcessor = new WercsRegulatoryDataFeedJobListner();
						msdsdocumentProcessor.moveToDestnationDir(filename.getPath(), CorpdmzToStepMSDSProcessor.wercsregulatorydataFeedDoneDir);
						System.out.println("sending mail to LP Team");
						SendMail();
						
					}
			}
			}
		}  catch (SQLException e) {

			System.out.println(e.getMessage());
		} finally {

			if (statement != null) {
				try {
					statement.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}

			if (dbConnection != null) {
				try {
					dbConnection.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}

		}
		return SKUValue;

	}

	

	private void SendMail() {

		System.out.println("sending mail to LP Team");

		// TODO Auto-generated method stub

	}

	
}
